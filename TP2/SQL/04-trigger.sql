--  Nom : Carl Montpetit 
--  Code permanent : MONC08069000 
--
--  Nom : Matthew Jovani
--  Code permanent : JOVM19108705
--
--  Nom : Mathieu Dumont
--  Code permanent : DUMM21059400 
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
-- D√©p√¥t GIT du TP au besoin --> https://gitlab.info.uqam.ca/montpetit.carl/basededonnees.git
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
------------------------------------------------------------------------------------------------------------------------
-- CE FICHIER INCLUT LES D√âCLENCHEURS ET LES FONCTIONS --
------------------------------------------------------------------------------------------------------------------------
-- Id #3 --> Priorit√© : Obligatoire
-- Cr√©er une proc√©dure ¬´ presence ¬ª permettant de fournir la liste des personnes dans l‚Äôusine entre deux dates (qui seront pass√©es en param√®tre √† la proc√©dure). 
-- Cette liste doit explicitement contenir :
-- - La date
-- - Le nom du d√©partement
-- - Le nom de l‚Äôemploy√© ou le visiteur

-- Attention :
-- ‚ñ™ La date doit √™tre saisie en utilisant les param√®tres de la proc√©dure.
-- ‚ñ™ Le format de saisie de la date se fait selon le format par d√©faut : jj-mm-aaaa
------------------------------------------------------------------------------------------------------------------------
-- Pour certain, c'est la structure de base d'une procedure
-- //TODO
-- Je ne suis pas certain, mais le ‚üπ dbs_output.put_line("Un string ou une variable √† imprimer √† l'√©cran") dans le bloc BEGIN/END avec un FOR ou un WHILE pourrait √™tre utile? ü§î 
CREATE OR REPLACE PROCEDURE p_presence (date_debut IN DATE, date_fin IN DATE) -- 2 param√®tres explicites  
AS 
BEGIN
  NULL; -- remplacer le NULL par du code
END p_presence;
------------------------------------------------------------------------------------------------------------------------
-- Id #8 --> Priorit√© : Obligatoire 
-- Cr√©er un d√©clencheur qui ins√®re dans la table ¬´ risque ¬ª la liste des personnes (employ√©/visiteur) (leur id, le nom, la date actuelle) qui ont √©t√© en contact avec une personne (employ√©/visiteur) qui est suspect√©e d‚Äôavoir le Covid-19 jusqu‚Äô√† 48 heures avant sa d√©claration.
------------------------------------------------------------------------------------------------------------------------
-- //TODO
-- On va utiliser le INSERT pour ajouter √† la table risque
CREATE OR REPLACE TRIGGER t_personne_a_risque
AFTER INSERT ON rencontre 
REFERENCING OLD AS avant NEW AS apres -- des noms de variables al√©atoires pour l'instant 
BEGIN
  NULL; -- remplacer le NULL par du code
END;

------------------------------------------------------------------------------------------------------------------------
-- Id #12 --> Priorit√© : Important
-- Supprimer les visiteurs qui ont visit√© l‚Äôentreprise avant le 1er mars 2021 et qui n‚Äôont pas d√©clar√© des sympt√¥mes.
------------------------------------------------------------------------------------------------------------------------
-- //FIXME
-- On va utiliser le DELETE pour supprimer un enregistrement (row) √† la table visiteur
CREATE OR REPLACE PROCEDURE p_supprimer_visiteur
AS 
BEGIN
  NULL; -- remplacer le NULL par du code
END p_supprimer_visiteur;
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--
--CREATE TEMPORARY VIEW ancient_visiteurs
--AS
SELECT v.id_personne FROM visiteur v
INNER JOIN entree_sortie es
ON (v.id_personne = es.id_personne)
WHERE (date_heure_sortie < '01-03-2021 00:00:00')
AND (symptomes = 'aucun');                       --**note: remove semicolon if adding ‚Üì‚Üì‚Üì‚Üì
--DELETE FROM visiteur
--WHERE (ancient_visiteurs.id_personne = v.id_personne);
------------------------------------------------------------------------------------------------------------------------
-- Id #13 --> Priorit√© : Obligatoire
-- Cr√©er un d√©clencheur qui ins√®re dans la table ¬´ alerte ¬ª la liste des personnes (leur id, le nom, la temp√©rature, la date actuelle) qui ont une temp√©rature de 39 degr√©s ou plus au moins 3 fois pendant les 5 derniers jours lors de l‚Äôentr√©e √† l‚Äôusine.
------------------------------------------------------------------------------------------------------------------------
-- //TODO
-- On va utiliser le INSERT pour ajouter √† la table alerte
CREATE OR REPLACE TRIGGER t_personne_alerte
AFTER INSERT ON entree_sortie 
REFERENCING OLD AS avant NEW AS apres -- des noms de variables al√©atoires pour l'instant 
BEGIN
  NULL; -- remplacer le NULL par du code
END;

------------------------------------------------------------------------------------------------------------------------
-- Id #14 --> Priorit√© : Important
-- En tant qu‚Äôadministrateur de la base de donn√©es, je veux avoir acc√®s √† un script me permettant de vider l‚Äôensemble des tables de leurs enregistrements.
------------------------------------------------------------------------------------------------------------------------
-- TRUNCATE supprime ‚àÄ les rows d'une table, mais ne supprime pas les tables en soit ‚üπ TRUNCATE ‚â† DROP ‚â† DELETE
-- S'il ‚àÉ une relation par foreign key avec une autre table on ajoute le mot cl√© ‚üπ CASCADE
-- //TODO
CREATE OR REPLACE PROCEDURE p_vider_tables 
AS 
BEGIN
  NULL; -- remplacer le NULL par du code
END p_vider_tables;
------------------------------------------------------------------------------------------------------------------------
-- Id #15 --> Priorit√© : Important
-- Le syst√®me doit s‚Äôassurer que les codes postaux respectent bien le format suivant : A#A #A#
------------------------------------------------------------------------------------------------------------------------
-- code ici
-- //TODO
------------------------------------------------------------------------------------------------------------------------
-- Id #16 --> Priorit√© : Important
-- En tant qu‚Äôadministrateur de la base de donn√©es, je veux que votre base de donn√©es soit d√©j√† optimis√©e √† l‚Äôaide d‚Äôindex, un index sur les noms des visiteurs et un index sur les noms des employ√©s.
------------------------------------------------------------------------------------------------------------------------
-- code ici
-- //TODO
------------------------------------------------------------------------------------------------------------------------
-- Id #17 --> Priorit√© : Important
-- En tant que directeur, je veux √™tre en mesure d‚Äôaugmenter les salaires de 2% pour les employ√©s qui ont re√ßu les deux vaccins et qui ont travaill√© plus de 20 jours entre le 1er mai et le 30 mai 2021.
------------------------------------------------------------------------------------------------------------------------
-- On va utiliser le UPDATE ici pour augmenter les salaires
-- //TODO ‚üπ PAS FINIT
CREATE OR REPLACE PROCEDURE p_augmenter_salaire 
AS 
CURSOR c_employe IS SELECT * FROM employe FOR UPDATE; -- declaration d'un curseur sur la table employe
v_augmentation_salaire PLS_INTEGER := 1.02; -- une variable contenant un nombre
v_ancien_salaire PLS_INTEGER; -- une variable contenant un autre nombre
BEGIN
  FOR r_employe IN c_employe LOOP
    v_ancien_salaire := r_employe.salaire;
    r_employe.salaire := r_employe.salaire * v_augmentation_salaire;
    UPDATE employe SET 
    ROW = r_employe 
    WHERE CURRENT OF c_employe;
    dbms_output.put_line('Le salaire de ' || r_employe.id_personne || ' a augmenter de ' || v_ancien_salaire || ' √† ' || r_employe.salaire); 
    END LOOP;
END p_augmenter_salaire;
------------------------------------------------------------------------------------------------------------------------
--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx--
------------------------------------------------------------------------------------------------------------------------
-- Fin de la cr√©ation des d√©clencheurs et des fonctions --
------------------------------------------------------------------------------------------------------------------------
